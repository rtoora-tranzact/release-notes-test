name: Release (Main)
on:
    pull_request:
        types: [closed]
        branches:
            - main
permissions: write-all
jobs:
    increment-version:
        if: github.event.pull_request.merged == true
        runs-on: ubuntu-latest
        outputs:
            NEXT_VERSION: ${{ steps.set-version-output.outputs.NEXT_VERSION }}
            TAG_NAME: ${{ steps.get-version.outputs.NEXT_VERSION }}
        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - id: get-version
              name: Increment version
              uses: im-open/git-version-lite@v2.0.0
              with:
                create-ref: true
                github-token: ${{ secrets.GITHUB_TOKEN }}
                default-release-type: major

            - id: set-version-output
              name: Set version output
              run: |
                export VERSION="$(echo ${{ steps.get-version.outputs.NEXT_VERSION }} | cut -d v -f2)"
                echo "NEXT_VERSION=$VERSION" >> $GITHUB_OUTPUT

            - run: echo "${{ steps.set-version-output.outputs.NEXT_VERSION }}"

    release-package:
        if: github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'main')
        needs: increment-version
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            DOTNET_PREVIEW: false
            SRC_DIR: "./src/MyCustomLib"
            SRC_PROJ: "Demo.MyCustomLib.csproj"
            PACKAGE_NAME: "Demo.MyCustomLib"
            PACKAGE_SOURCE: https://nuget.pkg.github.com/rtoora-tranzact/index.json
        runs-on: ubuntu-latest
        timeout-minutes: 15
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
                token: ${{ secrets.GITHUB_TOKEN }}

            - name: Set VERSION variable from tag
              run: echo "VERSION=${{ needs.increment-version.outputs.NEXT_VERSION }}" >> $GITHUB_ENV

            - uses: actions/setup-dotnet@v3
              with:
                dotnet-version: |
                    9.0.x
                dotnet-quality: ${{ env.DOTNET_PREVIEW == 'true' && 'preview' || 'ga' }}

            # Configure NuGet authentication
            - name: Setup NuGet credentials
              run: |
                if dotnet nuget list source | grep github-personal; then
                  dotnet nuget remove source github-personal
                fi
                dotnet nuget add source ${{ env.PACKAGE_SOURCE }} --name github-personal \
                  --username ${{ secrets.NUGET_USERNAME }} \
                  --password ${{ secrets.NUGET_AUTH_TOKEN }} \
                  --store-password-in-clear-text

            # - name: Create release notes file
            #   run: |
            #     echo '${{ needs.generate-changelog.outputs.changelog }}' > RELEASE_NOTES.md

            - name: Build
              run: dotnet build $SRC_DIR/$SRC_PROJ --configuration Release /p:Version=${VERSION}

            - name: Pack
              run: dotnet pack $SRC_DIR/$SRC_PROJ --configuration Release /p:Version=${VERSION} --output .

            - name: Push to GitHub Feed
              run: dotnet nuget push $PACKAGE_NAME.${VERSION}.nupkg --source $PACKAGE_SOURCE --api-key $NUGET_AUTH_TOKEN
              env:
                NUGET_AUTH_TOKEN: ${{ secrets.NUGET_AUTH_TOKEN }}

            # Obt√©n todos los tags
            - name: Fetch all tags
              run: git fetch --force --tags

            #   id: get_previous_release
            # - name: Get previous release version
            #   run: |
            #     PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -v -- '-' | head -n 1 || echo "")
            #     echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

            # Detectar mejor el rango de versiones
            # - name: Get version range
            #   id: get_version_range
            #   run: |
            #     LATEST_TAG=$(git tag --sort=-v:refname | grep -v -- '-' | head -n 1 || echo "")
            #     if [ -z "$LATEST_TAG" ]; then
            #       echo "PREVIOUS_TAG=" >> $GITHUB_OUTPUT
            #     else
            #       echo "PREVIOUS_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
            #     fi
            #     echo "CURRENT_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            #     echo "Comparing changes from $LATEST_TAG to current commit"


            # Extraer directamente los PRs mergeados
            # - name: Extract merged PRs manually
            #   id: extract_prs
            #   run: |
            #     if [ -z "${{ steps.get_version_range.outputs.PREVIOUS_TAG }}" ]; then
            #       echo "No previous tag found, extracting all PRs"
            #       PR_LIST=$(gh pr list --limit 50 --state merged --base main --json number,title,mergedAt,labels --jq '.[] | "PR #\(.number): \(.title) [" + (.labels | map(.name) | join(",")) + "]"')
            #     else
            #       echo "Extracting PRs since tag ${{ steps.get_version_range.outputs.PREVIOUS_TAG }}"
            #       SINCE_DATE=$(git log -1 --format=%ai ${{ steps.get_version_range.outputs.PREVIOUS_TAG }})
            #       PR_LIST=$(gh pr list --limit 50 --state merged --base main --json number,title,mergedAt,labels --jq ".[] | select(.mergedAt >= \"$SINCE_DATE\") | \"PR #\(.number): \(.title) [\" + (.labels | map(.name) | join(\",\")) + \"]\"")
            #     fi

            #     echo "PR_LIST<<EOF" >> $GITHUB_OUTPUT
            #     echo "$PR_LIST" >> $GITHUB_OUTPUT
            #     echo "EOF" >> $GITHUB_OUTPUT
            #   env:
            #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            # Obtener todos los PRs desde el √∫ltimo release (incluyendo los que llegaron mediante develop)
            - name: Get all PRs since last release
              id: get_prs
              run: |
                # Encontrar los √∫ltimos dos tags de versi√≥n estable
                LATEST_TAGS=$(git tag --sort=-v:refname | grep -v -- '-' | head -n 2 || echo "")

                # El primero en la lista es el actual que estamos creando
                CURRENT_TAG=$(echo "$LATEST_TAGS" | head -n 1)
                # El segundo es realmente el √∫ltimo tag estable previo
                PREVIOUS_STABLE_TAG=$(echo "$LATEST_TAGS" | tail -n 1)

                echo "Current tag being created: $CURRENT_TAG"
                echo "Previous stable tag: $PREVIOUS_STABLE_TAG"

                # Si no hay tag anterior, usa una fecha anterior
                if [ -z "$PREVIOUS_STABLE_TAG" ]; then
                  echo "No previous tag found, using 30 days ago as reference"
                  START_DATE=$(date -d "30 days ago" +%Y-%m-%d)
                else
                  # Obtener la fecha del √∫ltimo tag
                  START_DATE=$(git log -1 --format=%ad --date=short $PREVIOUS_STABLE_TAG)
                  echo "Using date from previous stable tag: $START_DATE"
                fi

                # Escribe los resultados para el siguiente paso
                echo "start_date=$START_DATE" >> $GITHUB_OUTPUT
                echo "latest_tag=$PREVIOUS_STABLE_TAG" >> $GITHUB_OUTPUT

            - id: build_changelog
              name: "Build Changelog"
              uses: mikepenz/release-changelog-builder-action@v4
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                # Include changes up to the current HEAD
                fromTag: ${{ steps.get_prs.outputs.latest_tag || '' }}
                toTag: ${{ github.sha }}
                includeOpen: false
                ignorePreReleases: true
                fetchReviewers: true
                fetchReleaseInformation: true
                failOnError: false
                configurationJson: |
                  {
                    "template": "## What's Changed\n\n{{#categories}}\n### {{title}}\n{{#entries}}\n- {{message}} (#{{number}})\n{{/entries}}\n{{/categories}}\n{{#if uncategorized}}\n### Other Changes\n{{#uncategorized}}\n- {{message}} (#{{number}})\n{{/uncategorized}}\n{{/if}}",
                    "pr_template": "{{title}}",
                    "categories": [
                      {
                          "title": "## üî• Breaking Changes",
                          "labels": ["breaking-change", "major"]
                      },
                      {
                          "title": "## üöÄ Features",
                          "labels": ["enhancement", "javascript", "minor"]
                      },
                      {
                          "title": "## üêõ Issues & Tasks",
                          "labels": ["bug", "patch"]
                      },
                      {
                          "title": "## üèó Maintenance",
                          "labels": ["maintenance", "documentation", "dependencies", "chore"]
                      }
                    ],
                    "label_extractor": [
                      {
                        "pattern": "^feat.*",
                        "target": "enhancement"
                      },
                      {
                        "pattern": "^fix.*",
                        "target": "bug"
                      },
                      {
                        "pattern": "^chore.*",
                        "target": "maintenance"
                      },
                      {
                        "pattern": "^docs.*",
                        "target": "documentation"
                      }
                    ],
                    "base_branches": ["main", "develop"],
                    "sort": {
                      "order": "ASC",
                      "on_property": "mergedAt"
                    },
                    "max_tags_to_fetch": 200,
                    "max_pull_requests": 200,
                    "max_back_track_time_days": 365,
                  }

            - id: create-release
              name: Create Release
              uses: im-open/create-release@v3.1.3
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                tag-name: ${{ env.VERSION }}
                commitish: ${{ github.ref }}
                body: ${{ steps.build_changelog.outputs.changelog }}
                prerelease: ${{ github.base_ref == 'develop' }}
                # The release might already exist if you hit 're-run jobs' on a workflow run that already completed
                # once. Creating a release when one already exists will fail, add the arg here to just delete it.
                delete-existing-release: true

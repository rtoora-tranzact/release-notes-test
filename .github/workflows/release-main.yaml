name: Release (Main)
on:
    pull_request:
        types: [closed]
        branches:
            - main
permissions: write-all
jobs:
    increment-version:
        if: github.event.pull_request.merged == true
        runs-on: ubuntu-latest
        outputs:
            NEXT_VERSION: ${{ steps.set-version-output.outputs.NEXT_VERSION }}
            TAG_NAME: ${{ steps.get-version.outputs.NEXT_VERSION }}
        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - id: get-version
              name: Increment version
              uses: im-open/git-version-lite@v2.0.0
              with:
                create-ref: true
                github-token: ${{ secrets.GITHUB_TOKEN }}
                default-release-type: major

            - id: set-version-output
              name: Set version output
              run: |
                export VERSION="$(echo ${{ steps.get-version.outputs.NEXT_VERSION }} | cut -d v -f2)"
                echo "NEXT_VERSION=$VERSION" >> $GITHUB_OUTPUT

            - run: echo "${{ steps.set-version-output.outputs.NEXT_VERSION }}"

    generate-changelog:
        if: github.event.pull_request.merged == true
        needs: increment-version
        runs-on: ubuntu-latest
        outputs:
            changelog: ${{ steps.tag-changelog.outputs.changelog }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Generate Changelog
              id: tag-changelog
              uses: loopwerk/tag-changelog@v1
              with:
                token: ${{ secrets.GITHUB_TOKEN }}
                exclude_types: other,doc,chore

            - name: Create release
              uses: actions/create-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${{ needs.increment-version.outputs.TAG_NAME }}
                release_name: Release ${{ needs.increment-version.outputs.TAG_NAME }}
                body: ${{ steps.tag-changelog.outputs.changelog }}

    release-package:
        if: github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'main')
        needs: [increment-version, generate-changelog]
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            DOTNET_PREVIEW: false
            SRC_DIR: "./src/MyCustomLib"
            SRC_PROJ: "Demo.MyCustomLib.csproj"
            PACKAGE_NAME: "Demo.MyCustomLib"
            PACKAGE_SOURCE: https://nuget.pkg.github.com/rtoora-tranzact/index.json
        runs-on: ubuntu-latest
        timeout-minutes: 15
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Set VERSION variable from tag
              run: echo "VERSION=${{ needs.increment-version.outputs.NEXT_VERSION }}" >> $GITHUB_ENV

            - uses: actions/setup-dotnet@v3
              with:
                dotnet-version: |
                    9.0.x
                dotnet-quality: ${{ env.DOTNET_PREVIEW == 'true' && 'preview' || 'ga' }}

            # Configure NuGet authentication
            - name: Setup NuGet credentials
              run: |
                if dotnet nuget list source | grep github-personal; then
                  dotnet nuget remove source github-personal
                fi
                dotnet nuget add source ${{ env.PACKAGE_SOURCE }} --name github-personal \
                  --username ${{ secrets.NUGET_USERNAME }} \
                  --password ${{ secrets.NUGET_AUTH_TOKEN }} \
                  --store-password-in-clear-text

            - name: Create release notes file
              run: |
                echo '${{ needs.generate-changelog.outputs.changelog }}' > RELEASE_NOTES.md

            - name: Build
              run: dotnet build $SRC_DIR/$SRC_PROJ --configuration Release /p:Version=${VERSION} /p:PackageReleaseNotes="$(cat RELEASE_NOTES.md)"

            - name: Pack
              run: dotnet pack $SRC_DIR/$SRC_PROJ --configuration Release /p:Version=${VERSION} /p:PackageReleaseNotes="$(cat RELEASE_NOTES.md)" --output .

            - name: Push to GitHub Feed
              run: dotnet nuget push $PACKAGE_NAME.${VERSION}.nupkg --source $PACKAGE_SOURCE --api-key $NUGET_AUTH_TOKEN
              env:
                NUGET_AUTH_TOKEN: ${{ secrets.NUGET_AUTH_TOKEN }}
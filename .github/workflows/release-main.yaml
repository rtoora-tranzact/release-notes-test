name: Release (Main)
on:
    pull_request:
        types: [closed]
        branches:
            - main
permissions: write-all
jobs:
    increment-version:
        if: github.event.pull_request.merged == true
        runs-on: ubuntu-latest
        outputs:
            NEXT_VERSION: ${{ steps.set-version-output.outputs.NEXT_VERSION }}
            TAG_NAME: ${{ steps.get-version.outputs.NEXT_VERSION }}
        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - id: get-version
              name: Increment version
              uses: im-open/git-version-lite@v2.0.0
              with:
                create-ref: true
                github-token: ${{ secrets.GITHUB_TOKEN }}
                default-release-type: major

            - id: set-version-output
              name: Set version output
              run: |
                export VERSION="$(echo ${{ steps.get-version.outputs.NEXT_VERSION }} | cut -d v -f2)"
                echo "NEXT_VERSION=$VERSION" >> $GITHUB_OUTPUT

            - run: echo "${{ steps.set-version-output.outputs.NEXT_VERSION }}"

    release-package:
        if: github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'main')
        needs: increment-version
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            DOTNET_PREVIEW: false
            SRC_DIR: "./src/MyCustomLib"
            SRC_PROJ: "Demo.MyCustomLib.csproj"
            PACKAGE_NAME: "Demo.MyCustomLib"
            PACKAGE_SOURCE: https://nuget.pkg.github.com/rtoora-tranzact/index.json
        runs-on: ubuntu-latest
        timeout-minutes: 15
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
                token: ${{ secrets.GITHUB_TOKEN }}

            - name: Set VERSION variable from tag
              run: echo "VERSION=${{ needs.increment-version.outputs.NEXT_VERSION }}" >> $GITHUB_ENV

            - uses: actions/setup-dotnet@v3
              with:
                dotnet-version: |
                    9.0.x
                dotnet-quality: ${{ env.DOTNET_PREVIEW == 'true' && 'preview' || 'ga' }}

            - name: Setup NuGet credentials
              run: |
                if dotnet nuget list source | grep github-personal; then
                  dotnet nuget remove source github-personal
                fi
                dotnet nuget add source ${{ env.PACKAGE_SOURCE }} --name github-personal \
                  --username ${{ secrets.NUGET_USERNAME }} \
                  --password ${{ secrets.NUGET_AUTH_TOKEN }} \
                  --store-password-in-clear-text

            - name: Build
              run: dotnet build $SRC_DIR/$SRC_PROJ --configuration Release /p:Version=${VERSION}

            - name: Pack
              run: dotnet pack $SRC_DIR/$SRC_PROJ --configuration Release /p:Version=${VERSION} --output .

            - name: Push to GitHub Feed
              run: dotnet nuget push $PACKAGE_NAME.${VERSION}.nupkg --source $PACKAGE_SOURCE --api-key $NUGET_AUTH_TOKEN
              env:
                NUGET_AUTH_TOKEN: ${{ secrets.NUGET_AUTH_TOKEN }}

            - name: Fetch all tags
              run: git fetch --force --tags

            - name: Get all PRs since last release
              id: get_prs
              run: |
                # Find the last two stable version tags
                LATEST_TAGS=$(git tag --sort=-v:refname | grep -v -- '-' | head -n 2 || echo "")

                # The first one is the current tag being created
                CURRENT_TAG=$(echo "$LATEST_TAGS" | head -n 1)
                # The second one is the previous stable tag
                PREVIOUS_STABLE_TAG=$(echo "$LATEST_TAGS" | tail -n 1)

                echo "Current tag being created: $CURRENT_TAG"
                echo "Previous stable tag: $PREVIOUS_STABLE_TAG"

                # If no previous tag found, use a date from 30 days ago
                if [ -z "$PREVIOUS_STABLE_TAG" ]; then
                  echo "No previous tag found, using 30 days ago as reference"
                  START_DATE=$(date -d "30 days ago" +%Y-%m-%d)
                else
                  # Get date from the previous tag
                  START_DATE=$(git log -1 --format=%ad --date=short $PREVIOUS_STABLE_TAG)
                  echo "Using date from previous stable tag: $START_DATE"
                fi

                # Write outputs for the next steps
                echo "start_date=$START_DATE" >> $GITHUB_OUTPUT
                echo "latest_tag=$PREVIOUS_STABLE_TAG" >> $GITHUB_OUTPUT

            - id: build_changelog
              name: "Build Changelog"
              uses: mikepenz/release-changelog-builder-action@v4
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                fromTag: ${{ steps.get_prs.outputs.latest_tag || '' }}
                toTag: ${{ github.sha }}
                configurationJson: |
                  {
                    "template": "#{{CHANGELOG}}\n\n<details>\n<summary>Uncategorized</summary>\n\n#{{UNCATEGORIZED}}\n</details>",
                    "categories": [
                      {
                          "title": "## 🔥 Breaking Changes",
                          "labels": ["breaking-change", "major"]
                      },
                      {
                          "title": "## 🚀 Features",
                          "labels": ["enhancement", "javascript", "minor", "feat"],
                          "exhaustive": false
                      },
                      {
                          "title": "## 🐛 Issues & Tasks",
                          "labels": ["bug", "patch", "fix"],
                          "exhaustive": false
                      },
                      {
                          "title": "## 🏗 Maintenance",
                          "labels": ["maintenance", "documentation", "dependencies", "chore", "refactor", "test"],
                          "exhaustive": false
                      }
                    ],
                    "transformers": [
                      {
                        "pattern": "^feat: (.*)$",
                        "target": "🚀 $1"
                      },
                      {
                        "pattern": "^fix: (.*)$",
                        "target": "🐛 $1"
                      },
                      {
                        "pattern": "^chore: (.*)$",
                        "target": "🏗 $1"
                      },
                      {
                        "pattern": "^PR (.*) to (.*)$",
                        "target": "🔄 Merge from $1 to $2"
                      }
                    ],
                    "base_branches": ["main", "develop"],
                    "sort": {
                      "order": "ASC",
                      "on_property": "mergedAt"
                    },
                    "max_tags_to_fetch": 200,
                    "max_pull_requests": 200,
                    "max_back_track_time_days": 365,
                    "enable_prereleases": false
                  }

            - id: create-release
              name: Create Release
              uses: im-open/create-release@v3.1.3
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                tag-name: ${{ env.VERSION }}
                commitish: ${{ github.ref }}
                body: ${{ steps.build_changelog.outputs.changelog }}
                prerelease: false
                delete-existing-release: true
